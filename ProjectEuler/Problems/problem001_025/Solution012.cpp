// https://projecteuler.net/problem=12
/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number 
would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

Solution:

*/

#include <iostream>
#include <vector>
using namespace std;

using natural = unsigned int;
constexpr natural limit = 1000;

// 41040th triangle number has over 1000 factors. sqrt(41040) = 202
const natural primes[] = { 
  2,   3,   5,   7,  11,  13,  17,  19,  23,  29,  31,  37,  41,
 43,  47,  53,  59,  61,  67,  71,  73,  79,  83,  89,  97, 101,
103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167,
173, 179, 181, 191, 193, 197, 199 };

natural getFactors(natural n) {
	natural factors = 1;
	for (auto prime: primes) {
		natural power = 0;
		while (n % prime == 0) {
			n /= prime;
			power++;
		}
		if (power)
			factors *= power + 1;
		if (n == 1)
			break;
	}
	if (n > 1)
		factors *= 2;
	return factors;
}

natural getFactorsTN(natural n) {
	if (n % 2 == 0)
		return getFactors(n / 2)*getFactors(n + 1);
	else
		return getFactors(n)*getFactors((n + 1) / 2);
}

auto getTable() {
	vector<natural> table = { 1 };
	natural max = 1, n = 1;
	while (max < limit) {
		natural factors = getFactorsTN(n);
		while(factors > max) {
			table.push_back(n);
			max++;
		}
		n++;
	}
	return table;
}

int main() {
	auto table = getTable();
	cout << (table[500] * (table[500] + 1)) / 2 << endl;
}
